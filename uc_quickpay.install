<?php

/**
 * @file
 * Install, module to create database for the uc_quickpay module.
 */

/**
 * Custom function use for returning plugin data.
 *
 * @return array
 *   $plugin_data return plugins payment ids.
 */
function uc_quickpay_get_quickpay_plugins() {
  // Balnk array.
  $plugin_data = [];
  // Get number of installed method names.
  $get_method_names = \Drupal::configFactory()->listAll('uc_payment.method');
  foreach ($get_method_names as $methods) {
    $config_method = \Drupal::config($methods);
    $data = $config_method->get();
    if ($data['plugin'] == 'quickpay_gateway') {
      // Store config method data in created $plugin_data array.
      $plugin_data[$data['id']] = $data;
    }
  }
  return $plugin_data;
}

/**
 * Implements hook_requirements().
 */
function uc_quickpay_requirements($phase) {
  // Required QuickPay API version.
  $required_version = '10';
  // Actual version of Quick Pay API.
  $quickpay_api_version = "";

  if (class_exists('QuickPay\API\Constants')) {
    $quickpay_api_version = QuickPay\API\Constants::API_VERSION;
  }
  // Version compare.
  $version_is_ok = version_compare($quickpay_api_version, $required_version, '>=');

  $requirements['uc_quickpay_library'] = [
    'title' => t('QuickPay PHP Library for Ubercart QuickPay'),
    'value' => t('Version @version', ['@version' => $quickpay_api_version]),
    'description' => t('QuickPay PHP Library is installed'),
  ];

  $requirements['uc_quickpay_library']['value'] = !empty($quickpay_api_version) ? $quickpay_api_version : t('Not Installed');
  $requirements['uc_quickpay_library']['severity'] = $version_is_ok ? REQUIREMENT_OK : REQUIREMENT_ERROR;
  if (!$version_is_ok) {
    $requirements['uc_quickpay_library']['description'] = $version_is_ok ? t('QuickPay PHP Library is required.') : t("QuickPay PHP API library version is not enough. Version needs to be @version or higher", ['@version' => $required_version]);
  }
  // Calling custom function.
  $plugins = uc_quickpay_get_quickpay_plugins();
  foreach ($plugins as $plugin) {
    $requirement_key = "uc_quickpay_keys_{$plugin['id']}";
    $requirements[$requirement_key] = [
      'title' => t('QuickPay API Keys & Ids for uc_quickpay "@plugin" payment method', ['@plugin' => $plugin['id']]),
      'value' => t('Configured'),
    ];

    if ($phase == 'runtime' && !uc_quickpay_check_api_keys_and_ids($plugin['settings'])) {
      $requirements[$requirement_key]['title'] = t('QuickPay API Keys.');
      $requirements[$requirement_key]['value'] = t('Not configured');
      $requirements[$requirement_key]['severity'] = REQUIREMENT_ERROR;
      $requirements[$requirement_key]['description'] = t('The QuickPay API keys & Ids are not configured for the @name payment method.', ['@name' => $plugin['id']]);
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function uc_quickpay_schema() {
  $schema = [];
  $schema['uc_payment_quickpay_callback'] = [
    'description' => 'Logs For QuickPay Callback Notifications.',
    'fields' => [
      'order_id' => [
        'description' => 'Order ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'payment_id' => [
        'description' => 'Payment ID from Callback QuickPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'merchant_id' => [
        'description' => 'Merchant ID from Callback QuickPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'payment_type' => [
        'description' => 'Payment type from Callback QuickPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'payment_brand' => [
        'description' => 'Payment Brand from Callback QuickPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'payment_amount' => [
        'description' => 'Payment Amount from Callback QuickPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'payment_status' => [
        'description' => 'Payment Stauts from Callback QuickPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'customer_email' => [
        'description' => 'E-mail address of the customer.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'created_at' => [
        'description' => 'QuickPay callback timestamp.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'indexes' => [
      'order_id' => ['order_id'],
    ],
    'primary key' => ['order_id'],
    'foreign keys' => [
      'uc_orders' => [
        'table' => 'uc_orders',
        'columns' => ['order_id' => 'order_id'],
      ],
    ],
  ];
  return $schema;
}
