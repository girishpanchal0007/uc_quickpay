<?php

/**
 * @file
 * Integrates QuickPay with Ubercart.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\uc_order\Entity\Order;
use Drupal\uc_quickpay\Entity\QuickPay;
use Drupal\uc_quickpay\Entity\QuickPayAPI\QuickPayException;

define('UC_QUICKPAY_QUICKPAY_VERSION', 'v10');

/**
 * Implements hook_form_BASE_FORM_ID_alter() for cart checkout form alter.
 */
function uc_quickpay_form_uc_cart_checkout_form_alter(&$form, FormStateInterface $form_state) {
  // Checking payment method for including library files.
  $form['#attached']['library'][] = 'uc_quickpay/uc_quickpay';
  $form['actions'] = array('#type' => 'actions');
  // Unset cancel event when submit from checkout to cart_review.
  unset($form['actions']['cancel']);
  $form['actions']['continue'] = array(
    '#type' => 'submit',
    '#value' => t('Review order'),
    '#validate' => array(),
    '#limit_validation_errors' => array(),
    '#button_type' => 'primary',
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for order view form alter.
 */
function uc_quickpay_form_uc_order_view_update_form_alter(&$form, FormStateInterface $form_state) {
  // Attached library files.
  $form['#attached']['library'][] = 'uc_quickpay/uc_quickpay';
  // Get order id which customer wants to refund.
  $refund_order_id = $form['order_id']["#value"];
  // Load order using order id.
  $order = Order::load($refund_order_id);
  // Get value forms.
  $order_total = '';
  $order_query = db_select('uc_orders', 'o')
    ->fields('o', array('order_id', 'uid', 'order_total', 'created'))
    ->condition('order_id', $order->id(), '=')
    ->orderBy('created', 'DESC')
    ->range(0, 2)
    ->execute();
  while ($record = $order_query->fetchAssoc()) {
    $order_total = $record['order_total'];
  }
  // Get payment detail.
  $payment_detail = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);
  if ($payment_detail->getPluginId() == "quickpay_gateway" && $order_total != 0) {
    $form['actions'] = array('#type' => 'actions');
    $form['actions']['order_refund'] = array(
      "#type" => 'submit',
      "#value" => 'Refund',
      "#attributes" => array(
        'id' => 'quickpay-refund',
        'autocomplete' => 'off',
      ),
      '#weight' => 15,
    );
    // Calling function on order views refund button.
    $form['actions']['order_refund']['#submit'][] = 'uc_quickpay_form_order_refund_process';
  }
}

/**
 * QuickPay refund process using "Refund" button on order panel.
 */
function uc_quickpay_form_order_refund_process(&$form, FormStateInterface $form_state) {
  // Get order id which customer wants to refund.
  $refund_order_id = $form['order_id']["#value"];
  // Load order using order id.
  $order = Order::load($refund_order_id);
  // Get current order payment method.
  $plugin = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);
  $configuration = $plugin->getConfiguration();
  // Order total.
  $order_amount = $order->getTotal();
  $amount_currency = uc_currency_format($order_amount, FALSE, FALSE, FALSE);
  // Get payment_id.
  $refund_payment_id = '';
  $payment_query = db_select('uc_payment_quickpay_callback', 'u')
    ->fields('u', array('payment_id'))
    ->condition('order_id', $refund_order_id, '=')
    ->range(0, 1)
    ->execute();
  while ($p_record = $payment_query->fetchAssoc()) {
    $refund_payment_id = $p_record['payment_id'];
  }
  // Create QuickPay client for refund process.
  $client = new QuickPay(":{$configuration['api']['user_api_key']}");
  // Refund variables.
  $refund_data = array(
    'amount' => $amount_currency,
  );
  // Request for refund process.
  $refund_res = $client->request->post("/payments/{$refund_payment_id}/refund?synchronized", $refund_data);
  // Return refund order.
  $refund_data = $refund_res->asObject();
  // Checking refund is success or not.
  if ($refund_res->isSuccess()) {
    $message = t('QuickPay credit card refund was successfully: @amount', ['@amount' => uc_currency_format($order_amount)]);
    // Order comment.
    uc_order_comment_save($order->id(), $order->getOwnerId(), $message, 'admin');
    db_update('uc_orders')
      ->fields(array(
        'order_total' => 0,
      ))
      ->condition('order_id', $order->id())
      ->execute();
  }
  else {
    \Drupal::logger('uc_quickpay')->notice($refund_data->message);
    uc_order_comment_save($order->id(), $order->getOwnerId(), $refund_data->message, 'admin');
  }
}

/**
 * Check that all API keys are configured.
 *
 * @return bool
 *   TRUE if all 4 keys have a value.
 */
function _uc_quickpay_check_api_keys($configuration) {
  return $configuration['api']['merchant_id'] &&
    $configuration['api']['user_api_key'] &&
    $configuration['api']['agreement_id'] &&
    $configuration['api']['payment_api_key'];
}
