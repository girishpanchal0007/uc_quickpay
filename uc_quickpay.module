<?php 

/**
 * @file
 * Integrates QuickPay with Ubercart.
 *
*/
use Drupal\Core\Form\FormStateInterface;
use Drupal\uc_order\Entity\Order;
use Drupal\uc_order\OrderInterface;
use Drupal\uc_payment\Entity\PaymentReceipt;
use Drupal\Core\Entity\EntityInterface;

use Drupal\uc_quickpay\Entity\QuickPay;
use Drupal\uc_quickpay\Entity\QuickPayAPI\QuickPayException;

/**
 * Implements hook_help().
 */
// function uc_quickpay_help($route_name, RouteMatchInterface $route_match) {
//     
// }



define('QUICKPAY_VERSION', 'v10');

function uc_quickpay_form_uc_cart_checkout_form_alter(&$form, FormStateInterface $form_state) {
	$form['#attached']['library'][] = 'uc_quickpay/uc_quickpay';
	//$form['actions']['submit']['#submit'][]  = 'uc_quickpay_form_submit_handler';
	// Add submit handler to preserve CC details for the back button.
	//$form['actions']['back']['#submit'][] = 'uc_credit_cart_review_back_submit';

	//unset($form['actions']['cancel']);
}
// function uc_quickpay_form_uc_cart_checkout_review_form_alter(&$form, FormStateInterface $form_state) {
//     global $base_url;
//     $order = $form_state->get('uc_order');
//     $plugin = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);
	
//     if($plugin->getPluginId() == 'uc_quickpay'){
//         unset($form['actions']['submit']);
//     }
// }

// order view form alter.
function uc_quickpay_form_uc_order_view_update_form_alter(&$form, FormStateInterface $form_state) {    
	$form['actions'] = array('#type' => 'actions');

	$form['actions']['order_refund'] = array(
		"#type" => 'submit',
		"#value" => 'Refund',
		"#attributes" => array(
			'id' => 'quickpay-refund',
			'autocomplete' => 'off',
		),
		'#weight' => 15,
	);

	$form['actions']['order_refund']['#submit'][]  = 'uc_quickpay_form_order_refund_process';
}
// to create quickpay refund process using "Refund" button on order panel
function uc_quickpay_form_order_refund_process(&$form, FormStateInterface $form_state){
	// get order id which customer want to refund.
	$refund_order_id = $form['order_id']["#value"];
	// load order using order id.
	$order = Order::load($refund_order_id);

	$plugin = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);
	$configuration = $plugin->getConfiguration();

	$order_amount = $order->getTotal();
	$amount_currency = uc_currency_format($order_amount, FALSE, FALSE, FALSE);

	$payment_load = uc_payment_load_payments($refund_order_id);

	$receipt_data_arr = '';
	foreach($payment_load as $payment_receipt){
		$receipt_data_arr = $payment_receipt->get('data')->getValue();
	}
	$receipt_data =  unserialize($receipt_data_arr[0]);
	$refund_payment_id = $receipt_data['response_payment_id'];

	$client = new QuickPay(":{$configuration['api']['api_key']}");

	$refund_data = array(
		'amount' => $amount_currency,
	);

	$refund_res = $client->request->post("/payments/{$refund_payment_id}/refund?synchronized", $refund_data);
	var_dump($refund_res);
	exit;
	
	if (!$refund_res->is_success()) {
	  $this->qp->logError('Error refunding payment.', $refund_res);
	  throw new QuickpayException('Error refunding payment.');
	}

}

/**
 * Check that all API keys are configured.
 *
 * @return bool
 *   TRUE if all 4 keys have a value.
 */
function _uc_quickpay_check_api_keys($configuration) {
	return $configuration['api']['merchant_id'] &&
		$configuration['api']['private_key'] &&
		$configuration['api']['agreement_id'] &&
		$configuration['api']['api_key'];
}

