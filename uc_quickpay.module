<?php 
/**
 * @file
 * Integrates QuickPay with Ubercart.
 *
*/
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Query\Update;
use Drupal\uc_order\Entity\Order;
use Drupal\uc_order\OrderInterface;
use Drupal\uc_payment\Entity\PaymentReceipt;
use Drupal\Core\Entity\EntityInterface;

use Drupal\uc_quickpay\Entity\QuickPay;
use Drupal\uc_quickpay\Entity\QuickPayAPI\QuickPayException;


define('QUICKPAY_VERSION', 'v10');

function uc_quickpay_form_uc_cart_checkout_form_alter(&$form, FormStateInterface $form_state) {
	if( $form['panes']['payment']['payment_method']["#default_value"] == "quickpay" ){
		$form['#attached']['library'][] = 'uc_quickpay/uc_quickpay';
	}																									
	$form['actions'] = array('#type' => 'actions');
	// unset cancel event when submit form from checkout to cart_review.
	unset($form['actions']['cancel']);
    
  $form['actions']['continue'] = array(
    '#type' => 'submit',
    '#value' => t('Review order'),
    '#validate' => array(),
    '#limit_validation_errors' => array(),
    '#button_type' => 'primary',
  );
}

// order view form alter.
function uc_quickpay_form_uc_order_view_update_form_alter(&$form, FormStateInterface $form_state) { 
	$form['#attached']['library'][] = 'uc_quickpay/uc_quickpay';   
	// get order id which customer want to refund.
	$refund_order_id = $form['order_id']["#value"];
	// load order using order id.
	$order = Order::load($refund_order_id);

	// get value form
	$order_total = '';
	$query1 = db_select('uc_orders', 'o')
    ->fields('o', array('order_id', 'uid', 'order_total', 'created'))
    ->condition('order_id',  $order->id() , '=')
    ->orderBy('created', 'DESC')
    ->range(0,2)
    ->execute();
    while($record = $query1->fetchAssoc()) {
    	$order_total = $record['order_total'];
    }
	// get payment detail.
	$payment_detail = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);
	
	if($payment_detail->getPluginId() == "quickpay_gateway" && $order_total != 0){

		$form['actions'] = array('#type' => 'actions');
		$form['actions']['order_refund'] = array(
			"#type" => 'submit',
			"#value" => 'Refund',
			"#attributes" => array(
				'id' => 'quickpay-refund',
				'autocomplete' => 'off',
			),
			'#weight' => 15,
		);
		$form['actions']['order_refund']['#submit'][]  = 'uc_quickpay_form_order_refund_process';
	}
}
// to create quickpay refund process using "Refund" button on order panel
function uc_quickpay_form_order_refund_process(&$form, FormStateInterface $form_state){
	// get order id which customer want to refund.
	$refund_order_id = $form['order_id']["#value"];
	// load order using order id.
	$order = Order::load($refund_order_id);

	$plugin = \Drupal::service('plugin.manager.uc_payment.method')->createFromOrder($order);
	$configuration = $plugin->getConfiguration();

	$order_amount = $order->getTotal();
	$amount_currency = uc_currency_format($order_amount, FALSE, FALSE, FALSE);

	$payment_load = uc_payment_load_payments($refund_order_id);

	$receipt_data_arr = '';
	foreach($payment_load as $payment_receipt){
		$receipt_data_arr = $payment_receipt->get('data')->getValue();
	}
	$receipt_data =  unserialize($receipt_data_arr[0]);
	$refund_payment_id = $receipt_data['response_payment_id'];

	$client = new QuickPay(":{$configuration['api']['user_api_key']}");

	$refund_data = array(
		'amount' => $amount_currency,
	);

	$refund_res = $client->request->post("/payments/{$refund_payment_id}/refund?synchronized", $refund_data);

	$refund_data = $refund_res->asObject();
	

	if ($refund_res->isSuccess()) {

		$message = t('QuickPay credit card refund was successfully: @amount', ['@amount' => uc_currency_format($amount_currency)]);

    uc_order_comment_save($order->id(), $order->getOwnerId(), $message, 'admin');   

    db_update('uc_orders')
    ->fields(array(
    	'order_total' => 0,
   	))
    ->condition('order_id', $order->id())
    ->execute();

	} else{	
	
		\Drupal::logger('uc_quickpay')->notice($refund_data->message);
                
    uc_order_comment_save($order->id(), $order->getOwnerId(), $refund_data->message, 'admin');
	}

}
/**
 * Check that all API keys are configured.
 *
 * @return bool
 *   TRUE if all 4 keys have a value.
 */
function _uc_quickpay_check_api_keys($configuration) {
	return $configuration['api']['merchant_id'] &&
		$configuration['api']['user_api_key'] &&
		$configuration['api']['agreement_id'] &&
		$configuration['api']['payment_api_key'];
}
